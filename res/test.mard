module Test where
import Core
import Core.Native.List
import Core.MyFile as my
import Core.Native.Ethernet

myMax a: int, b: int -> int do
  ret
      if a > b then
        a
      else
        b

b = 12.3
c = ThisTest<int>(10,10)

testFunction c: ref float -> void do
  b = b + 12.3
  c = c
  c = 12.0
  myC = g|b + args|c
  pass

funcThatReceiveClass -> void do
  pass

getNumber -> void do
  pass

funcThatReceiveClass c: copy ThisTest<float> -> void do
  pass

class MyClass do
  MyClass do
    pass

  getNumber -> void do
    g|getNumber()

fThatReturnPtr -> ptr ThisTest<float> do
  ret ThisTest<float>(10.1, 100)


Main -> int do
  Serial.begin(9600)
  pinMode(13, OUTPUT)
  myList = ArrayList<int>()
  i = 0
  while true do
    sleep(1000)
    printMemStats()
    myList.add(10)
    if i > 100 and (true or true) then
      myList.clear()
      Serial.println(F("Wyczyszczono liste!"))

    classTest = ThisTest<float>(13.0, 100)
    z = classTest.getA()
    Serial.println(z)
    i = i + 20
    Serial.println(classTest.getA())
    Serial.println(i)

    bClass = classTest
    bClass = classTest
    bClass = classTest
    bClass = classTest
    println("sees")
    print("HEHEH")
    mList = [ThisTest<float>| ThisTest<float>(13.0, 100), ThisTest<float>(13.0, 100)]
    result = mList.get(1)
    funcThatReceiveClass(classTest)
//    funcThatReceiveClass(100)

  a1: ptr auto = ThisTest<float>(13.0, 100)
  a2: copy auto = a1
  a3: ref auto = a1
  a4: ref auto = a1
  a5: ref auto = a1

  intList = [int| 20]
  intList[0]
  intList[1] = 10
  lTest = ArrayList<ThisTest<float>>()
  lTest.add(ThisTest<float>(10.1, 100))
  lTest.add(ThisTest<float>(10.1, 100))
  lTest.add(ThisTest<float>(10.1, 100))
  lTest.add(ThisTest<float>(10.1, 100))
  lTest[1]
  lTest[1] = ThisTest<float>(10.2, 101)
  print(my|myFileFn())
  c = ((10.0 + 11.0) * 1.0 / 100.0) / 10.0
  testFunction(c)
  print(c)
  intPtr = [10]
  needPointer(intPtr)
  gotPtr = getPointer()
  d = true
//
  xd = ThisTest<float>(10.1, 100)
  x2 : ptr auto = xd
  haha = ThisTest<float>(10.1, 1000)

  ret 0


