import Core
import Core.Native.List
import Core.MyFile as my

myMax a: int, b: int -> int do
  ret
      if a > b then
        a
      else
        b

b = 12.3

testFunction c: float -> void do
  b = b + 12.3
  c = c
  myC = g|b + args|c
  pass

funcThatReceiveClass -> void do
  pass

getNumber -> void do
  pass

funcThatReceiveClass c: ThisTest<float> -> void do
  pass

class MyClass do
  MyClass do
    pass

  getNumber -> void do
    g|getNumber()

Main -> int do
  Serial.begin(9600)
  pinMode(13, OUTPUT)
  myList = ArrayList<int>()
  i = 0
  while true do
    sleep(1000)
    printMemStats()
    myList.add(10)
    if i > 100 and true then
      myList.clear()
      Serial.println(F("Wyczyszczono liste!"))

    classTest = ThisTest<float>(13.0, 100)
    z = classTest.getA()
    Serial.println(z)
    i = i + 20
    Serial.println(classTest.getA())
    Serial.println(i)

    bClass = classTest
    bClass = classTest
    bClass = classTest
    bClass = classTest
    println("sees")
    print("HEHEH")
    mList = [ThisTest<float>| ThisTest<float>(13.0, 100), ThisTest<float>(13.0, 100)]
//    mList[12]
//    [mList|0] = 123
//    [mList|] = 123
    result = mList.get(1)
    funcThatReceiveClass(classTest)
//    funcThatReceiveClass(100)

  intList = [int| 20]
  lTest = ArrayList<ThisTest<float>>()
  lTest.add(ThisTest<float>(10.1, 100))
  lTest.get(1)
  print(my|myFileFn())
  ret 0


