module Test where
import Core
import Core.Native.List
import Core.MyFile as my
import Core.Native.Ethernet
import Core.Native.Bitwise
import Core.Board.Uno

myMax a: int, b: int -> int do
  ret
      if a > b then
        a
      else
        b

b = 12.3
c = ThisTest<bool>(true,10)
testFunction c: ref float -> int do
  b = b + 12.3
  c = c
  c = 12.0
  ret g|b + args|c

testFunction -> int do
  ret 1

funcThatReceiveClass -> void do
  pass

getNumber -> void do
  pass

funcThatReceiveClass c: copy ThisTest<int> -> void do
  pass

class MyClass do
  MyClass do
    pass

  getNumber -> void do
    g|getNumber()

fThatReturnPtr -> ptr ThisTest<float> do
  ret ThisTest<float>(10.1, 100)

takeLambdaAsArg l: fn<int,int> -> int do
  x = l
  l(1)
  ret x(1)


Main -> int do
  Serial.begin(9600)
  pinMode(13, OUTPUT)
  myList = ArrayList<int>()
  i = 0
  while true do
    sleep(1000)
    printMemStats()
    myList.add(10)
    if i > 100 and (true or true) then
      myList.clear()
      Serial.println(F("Wyczyszczono liste!"))

    classTest: auto = ThisTest<int>(13, 100)
    z : float = classTest.getA()
    funVar : fn<int> = testFunction
    zzzz = funVar()
    Serial.println(z)
    i = i + 20
    Serial.println(classTest.getA())
    Serial.println(i)

    bClass = classTest
    bClass = classTest
    bClass = classTest
    bClass = classTest
    println("sees")
    print("HEHEH")
    mList = [ThisTest<float>| ThisTest<float>(13.0, 100), ThisTest<float>(13.0, 100)]
    result = mList.get(1)
    funcThatReceiveClass(classTest)

  a1: ptr auto = ThisTest<float>(13.0, 100)
  a2: copy auto = a1
  a3: ref auto = a1
  a4: ref auto = a1
  a5: ref auto = a1

  intList = [20] // create new list with one element
  intList.add(20)  // append list
  intList[0] // get element
  intList[1] = 10 // set index

  emptyIntList = [int|]
//  emptyIntList2: list<int> = []

  lTest = ArrayList<ThisTest<float>>()
  lTest.add(ThisTest<float>(10.1, 100))
  lTest.add(ThisTest<float>(10.1, 100))
  lTest.add(ThisTest<float>(10.1, 100))
  lTest.add(ThisTest<float>(10.1, 100))
  lTest[1]
  lTest[1] = ThisTest<float>(10.2, 101)
  print(my|myFileFn())
  c = ((10.0 + 11.0) * 1.0 / 100.0) / 10.0
  testFunction(c)
  print(c)
  intPtr = [10]
  needPointer(intPtr)
  gotPtr = getPointer()
  d = true
//
  xd = ThisTest<float>(10.1, 100)
  x2 : ptr auto = xd
  haha = ThisTest<float>(10.1, 1000)

  inta = 12
  refInta: ref auto = inta
  ptrInta: ptr auto = inta
  ptrInta = inta + 10
  lambda: fn<int,int> = \x -> x + 10
  lambda2: fn<int, int, int> =
    {\x, z ->
       y = x + 10
       y + 13
    }
  lambda3: fn<fn<int>, int> = \x -> x()
  res1 = lambda(12)
  res2 = lambda2(1,2)
  lambda3(\ -> 1)
  takeLambdaAsArg(\x -> x+1)
  res3 = res1 + res2
  print(res1 + res2 * 10)

  test8: uint8 = 12
  setBitHigh(PORTB, 5)
  modulo = 2 % 2

  ret 0


